/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package projetobd;
import Class.Feito_Com;
import Class.Usuario;
import Class.Funcionario;
import Class.Pedido;
import Class.Fornecedor;
import Class.MateriaPrima;
import Class.Pao;
import Class.Produto_Detalhe;
import com.sun.awt.AWTUtilities;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.MouseInfo;
import java.awt.Point;
import java.awt.Shape;
import java.awt.geom.RoundRectangle2D;
import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JDesktopPane;
/**
 *
 * @author aliso
 */
public class Main extends javax.swing.JFrame {
    
    
    private TelaPrincipal screen1;
    //private ConsultaGeral screen5;

    

    
            
        int angulo_X, angulo_Y;
        boolean maxmizado = false;
        
    
    /**
     * Creates new form Main
     */
    public Main() {
        
        
 
        
        
        this.setUndecorated(true);
        this.setSize(1197, 686);


        initComponents();
        
        this.setLocationRelativeTo(null);
        Shape forma = new RoundRectangle2D.Double(0,0,this.getBounds().width,this.getBounds().height,27,27);
        AWTUtilities.setWindowShape(this,forma);
        jPanelLogin.setBackground(new Color(0,0,0,125));
        
                 
 
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanelLogin = new javax.swing.JPanel();
        jFormattedTextFieldIdentificador = new javax.swing.JFormattedTextField();
        jButtonLogin = new javax.swing.JButton();
        jLabelLogin = new javax.swing.JLabel();
        HOME = new javax.swing.JPanel();
        jLabelFechar = new javax.swing.JLabel();
        jLabelMaxMin = new javax.swing.JLabel();
        jLabelMin = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanelLogin.setBackground(new java.awt.Color(255, 255, 255));

        jFormattedTextFieldIdentificador.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        try {
            jFormattedTextFieldIdentificador.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("######")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        jFormattedTextFieldIdentificador.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jButtonLogin.setBackground(new java.awt.Color(0, 126, 167));
        jButtonLogin.setFont(new java.awt.Font("Arial Black", 0, 13)); // NOI18N
        jButtonLogin.setText("Entrar Sistema");
        jButtonLogin.setBorder(null);
        jButtonLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLoginActionPerformed(evt);
            }
        });

        jLabelLogin.setFont(new java.awt.Font("Arial Black", 0, 13)); // NOI18N
        jLabelLogin.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jPanelLoginLayout = new javax.swing.GroupLayout(jPanelLogin);
        jPanelLogin.setLayout(jPanelLoginLayout);
        jPanelLoginLayout.setHorizontalGroup(
            jPanelLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelLoginLayout.createSequentialGroup()
                .addGroup(jPanelLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelLoginLayout.createSequentialGroup()
                        .addGap(471, 471, 471)
                        .addComponent(jFormattedTextFieldIdentificador, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelLoginLayout.createSequentialGroup()
                        .addGap(462, 462, 462)
                        .addGroup(jPanelLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButtonLogin, javax.swing.GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE)
                            .addComponent(jLabelLogin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelLoginLayout.setVerticalGroup(
            jPanelLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelLoginLayout.createSequentialGroup()
                .addGap(141, 141, 141)
                .addComponent(jLabelLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(jFormattedTextFieldIdentificador, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(75, 75, 75)
                .addComponent(jButtonLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(309, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(jPanelLogin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanelLogin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        HOME.setBackground(new java.awt.Color(51, 51, 51));
        HOME.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                HOMEMouseDragged(evt);
            }
        });
        HOME.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                HOMEMousePressed(evt);
            }
        });

        jLabelFechar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelFecharMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabelFecharMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabelFecharMouseExited(evt);
            }
        });

        jLabelMaxMin.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelMaxMinMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabelMaxMinMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabelMaxMinMouseExited(evt);
            }
        });

        jLabelMin.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelMinMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabelMinMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabelMinMouseExited(evt);
            }
        });

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/com/fechar_x.png"))); // NOI18N
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel1MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel1MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabel1MouseExited(evt);
            }
        });

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/com/max_mim_x.png"))); // NOI18N
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel2MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabel2MouseExited(evt);
            }
        });

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/com/mim_x.png"))); // NOI18N
        jLabel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel3MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel3MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabel3MouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jLabel3MousePressed(evt);
            }
        });

        javax.swing.GroupLayout HOMELayout = new javax.swing.GroupLayout(HOME);
        HOME.setLayout(HOMELayout);
        HOMELayout.setHorizontalGroup(
            HOMELayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HOMELayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabelFechar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addGap(33, 33, 33)
                .addComponent(jLabelMaxMin)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelMin)
                .addContainerGap(1051, Short.MAX_VALUE))
        );
        HOMELayout.setVerticalGroup(
            HOMELayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(HOMELayout.createSequentialGroup()
                .addGroup(HOMELayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelFechar, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelMaxMin, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelMin, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(HOME, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(HOME, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 695, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void HOMEMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_HOMEMousePressed
        // TODO add your handling code here:
        angulo_X = evt.getX();
        angulo_Y = evt.getY();
    }//GEN-LAST:event_HOMEMousePressed

    private void HOMEMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_HOMEMouseDragged
        // TODO add your handling code here:
        Point point = MouseInfo.getPointerInfo().getLocation();
        this.setLocation(point.x - angulo_X, point.y - angulo_Y);
    }//GEN-LAST:event_HOMEMouseDragged

    private void jLabelMinMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelMinMouseExited
        // TODO add your handling code here:
        jLabelMin.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/com/mim.png")));
    }//GEN-LAST:event_jLabelMinMouseExited

    private void jLabelMinMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelMinMouseEntered
        // TODO add your handling code here:
        jLabelMin.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/com/mim.png")));
    }//GEN-LAST:event_jLabelMinMouseEntered

    private void jLabelMinMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelMinMouseClicked
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jLabelMinMouseClicked

    private void jLabelMaxMinMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelMaxMinMouseExited
        // TODO add your handling code here:
        jLabelMaxMin.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/com/max-mim.png")));
    }//GEN-LAST:event_jLabelMaxMinMouseExited

    private void jLabelMaxMinMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelMaxMinMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_jLabelMaxMinMouseEntered

    private void jLabelMaxMinMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelMaxMinMouseClicked
        // TODO add your handling code here:

    }//GEN-LAST:event_jLabelMaxMinMouseClicked

    private void jLabelFecharMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelFecharMouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_jLabelFecharMouseExited

    private void jLabelFecharMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelFecharMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_jLabelFecharMouseEntered

    private void jLabelFecharMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelFecharMouseClicked
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jLabelFecharMouseClicked

    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked
        // TODO add your handling code here:
        this.setExtendedState(ICONIFIED);
    }//GEN-LAST:event_jLabel2MouseClicked

    private void jLabel2MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseEntered
        // TODO add your handling code here:
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/com/max-mim.png")));
    }//GEN-LAST:event_jLabel2MouseEntered

    private void jLabel1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseEntered
        // TODO add your handling code here:
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/com/fechar.png")));
    }//GEN-LAST:event_jLabel1MouseEntered

    private void jLabel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseClicked
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jLabel1MouseClicked

    private void jLabel3MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel3MouseEntered
        // TODO add your handling code here:
        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/com/mim.png")));
    }//GEN-LAST:event_jLabel3MouseEntered

    private void jLabel3MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel3MousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel3MousePressed

    private void jLabel3MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel3MouseExited
        // TODO add your handling code here:
         jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/com/mim_x.png")));
    }//GEN-LAST:event_jLabel3MouseExited

    private void jLabel1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseExited
        // TODO add your handling code here:
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/com/fechar_x.png")));
    }//GEN-LAST:event_jLabel1MouseExited

    private void jLabel2MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseExited
        // TODO add your handling code here:
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/com/max_mim_x.png")));
    }//GEN-LAST:event_jLabel2MouseExited

    private void jLabel3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel3MouseClicked
        // TODO add your handling code here:
        
        if(maxmizado == false){
            Shape forma = new RoundRectangle2D.Double(0,0,0,0,0,0);
            AWTUtilities.setWindowShape(this,forma);
            this.setExtendedState(this.getExtendedState()|Main.MAXIMIZED_BOTH);
            //jLabel1.setMaximumSize(null);

            maxmizado = true;
        } else{
            Shape forma = new RoundRectangle2D.Double(0,0,this.getBounds().width,this.getBounds().height,27,27);
            AWTUtilities.setWindowShape(this,forma);
            this.setSize(1200, 665);
            this.setLocationRelativeTo(null);

            maxmizado = false;
        }
    }//GEN-LAST:event_jLabel3MouseClicked

    private void jButtonLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLoginActionPerformed
        // TODO add your handling code here:
        try {

            this.Login();
        } catch (Exception ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonLoginActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }
    

    
    
        public  synchronized static Usuario atualizaMysqlUsuario(Usuario dados, int op) throws ClassNotFoundException, SQLException{
            
         System.out.println("Tentando conectar ao MySQL via Atualiza MYSQL...");
            
           Class.forName("com.mysql.jdbc.Driver");
            String urlMysql = "jdbc:mysql://localhost:3306/bancodedados1";
            String usuarioMysql = "root";
            String senhaMysql = "admin12345"; // SNHA DO MYSQL
            Connection con = DriverManager.getConnection(urlMysql, usuarioMysql, senhaMysql);
            Statement stmt = con.createStatement(); //objeto Statement
            ResultSet rs; //objeto ResultSet
            PreparedStatement preparedStatement;
            
            
            int id = dados.getIdCliente();
            String cpf = dados.getCpf();
            String endereco = dados.getEndereco();
            String nome = dados.getNome();
            String telefone = dados.getTelefone();
        try {
            switch (op) {
                case 1:
                    if (cpf != null) {
                        preparedStatement = con.prepareStatement("INSERT INTO usuarios values (default, ?,?,?,?)");
                        preparedStatement.setString(1, nome);
                        preparedStatement.setString(2, cpf);
                        preparedStatement.setString(3, endereco);
                        preparedStatement.setString(4, telefone);
                        preparedStatement.executeUpdate();
                    }
                    break;
                case 2:
                        preparedStatement = con.prepareStatement("UPDATE usuarios SET nome = ?, cpf = ?, endereco = ?, telefone = ? WHERE id = "+id);
                        preparedStatement.setString(1, nome);
                        preparedStatement.setString(2, cpf);
                        preparedStatement.setString(3, endereco);
                        preparedStatement.setString(4, telefone);
                        preparedStatement.executeUpdate();
                    break;
                case 3:
                        try{ /* Verifica se já existe um usuario com cpf ou registro inserido */     
                            boolean existe = false;
                            if(cpf.equals("") == false){
                                preparedStatement = con.prepareStatement("SELECT * FROM usuarios WHERE cpf like ?");
                                preparedStatement.setString(1, cpf + "%");  
                                rs = (ResultSet) preparedStatement.executeQuery();  
                                while(rs.next()){
                                    if(rs.getString("cpf").equalsIgnoreCase(cpf)){
                                        id = Integer.parseInt(rs.getString("id"));
                                        existe = true;
                                        break;
                                    }   
                                }//end while
                                if(existe){
                                    dados.setIdCliente(id);
                                    dados.setNome(rs.getString("nome"));
                                    dados.setCpf(rs.getString("cpf"));
                                    dados.setEndereco(rs.getString("endereco"));
                                    dados.setTelefone(rs.getString("telefone"));
                                } else {
                                    dados.setNome("");
                                    dados.setCpf("");
                                    dados.setEndereco("");
                                    dados.setTelefone("");
                                }    
                            } 
                            return dados;
                        } catch(NumberFormatException | SQLException e){ }
                    break;    
                case 4:
                        preparedStatement = con.prepareStatement("DELETE FROM usuarios WHERE id = "+id);
                        preparedStatement.executeUpdate();
                    break; 
            }


        } catch(SQLException e ) {
            System.out.println(e);
            
        }finally{
            con.close();
            stmt.close();
            
        }
        return dados;
        
    }
        
    
    public  synchronized static Funcionario atualizaMysqlFuncionario(Funcionario dados, int op) throws ClassNotFoundException, SQLException{
            
         System.out.println("Tentando conectar ao MySQL via Atualiza MYSQL...");
            
           Class.forName("com.mysql.jdbc.Driver");
            String urlMysql = "jdbc:mysql://localhost:3306/bancodedados1";
            String usuarioMysql = "root";
            String senhaMysql = "admin12345"; // SNHA DO MYSQL
            Connection con = DriverManager.getConnection(urlMysql, usuarioMysql, senhaMysql);
            Statement stmt = con.createStatement(); //objeto Statement
            ResultSet rs; //objeto ResultSet
            PreparedStatement preparedStatement;
            
            
            int id = dados.getIdCliente();
            String cpf = dados.getCpf();
            String endereco = dados.getEndereco();
            String nome = dados.getNome();
            String telefone = dados.getTelefone();
            String codigo = dados.getCodigo();
            String funcao = dados.getFuncao();
            String salario = dados.getSalario();
        try {
            switch (op) {
                case 1:
                    if (codigo != null) {
                        preparedStatement = con.prepareStatement("INSERT INTO funcionarios values (default, ?,?,?,?,?,?,?)");
                        preparedStatement.setString(1, nome);
                        preparedStatement.setString(2, cpf);
                        preparedStatement.setString(3, endereco);
                        preparedStatement.setString(4, telefone);
                        preparedStatement.setString(5, codigo);
                        preparedStatement.setString(6, funcao);
                        preparedStatement.setString(7, salario);
                        preparedStatement.executeUpdate();
                    }
                    break;
                case 2:
                        preparedStatement = con.prepareStatement("UPDATE funcionarios SET nome = ?, cpf = ?, endereco = ?, telefone = ?, codigo = ?, funcao = ?, salario = ?  WHERE id = "+id);
                        preparedStatement.setString(1, nome);
                        preparedStatement.setString(2, cpf);
                        preparedStatement.setString(3, endereco);
                        preparedStatement.setString(4, telefone);
                        preparedStatement.setString(5, codigo);
                        preparedStatement.setString(6, funcao);
                        preparedStatement.setString(7, salario);
                        preparedStatement.executeUpdate();
                    break;
                case 3:
                        try{ /* Verifica se já existe um funcionario com cpf ou registro inserido */     
                            boolean existe = false;
                            if(codigo.equals("") == false){
                                preparedStatement = con.prepareStatement("SELECT * FROM funcionarios WHERE codigo like ?");
                                preparedStatement.setString(1, codigo + "%");  
                                rs = (ResultSet) preparedStatement.executeQuery();  
                                while(rs.next()){
                                    if(rs.getString("codigo").equalsIgnoreCase(codigo)){
                                        id = Integer.parseInt(rs.getString("id"));
                                        existe = true;
                                        break;
                                    }   
                                }//end while
                                if(existe){
                                    dados.setIdCliente(id);
                                    dados.setNome(rs.getString("nome"));
                                    dados.setCpf(rs.getString("cpf"));
                                    dados.setEndereco(rs.getString("endereco"));
                                    dados.setTelefone(rs.getString("telefone"));
                                    dados.setCodigo(rs.getString("codigo"));
                                    dados.setFuncao(rs.getString("funcao"));
                                    dados.setSalario(rs.getString("salario"));
                                } else {
                                    dados.setNome("");
                                    dados.setCpf("");
                                    dados.setEndereco("");
                                    dados.setTelefone("");
                                    dados.setCodigo("");
                                    dados.setFuncao("");
                                    dados.setSalario("");
                                }    
                            } 
                            return dados;
                        } catch(NumberFormatException | SQLException e){ }
                    break;    
                case 4:
                        preparedStatement = con.prepareStatement("DELETE FROM funcionarios WHERE id = "+id);
                        preparedStatement.executeUpdate();
                    break; 
            }


        } catch(SQLException e ) {
            System.out.println(e);
            
        }finally{
            con.close();
            stmt.close();
            
        }
        return dados;
        
    }  
    
    public  synchronized static Fornecedor atualizaMysqlFornecedor(Fornecedor dados, int op) throws ClassNotFoundException, SQLException{
            
         System.out.println("Tentando conectar ao MySQL via Atualiza MYSQL...");
            
           Class.forName("com.mysql.jdbc.Driver");
            String urlMysql = "jdbc:mysql://localhost:3306/bancodedados1";
            String usuarioMysql = "root";
            String senhaMysql = "admin12345"; // SNHA DO MYSQL
            Connection con = DriverManager.getConnection(urlMysql, usuarioMysql, senhaMysql);
            Statement stmt = con.createStatement(); //objeto Statement
            ResultSet rs; //objeto ResultSet
            PreparedStatement preparedStatement;
            
            
            int id = dados.getIdFornc();
            String endereco = dados.getEndereco();
            String nome = dados.getNome();
            String telefone = dados.getTelefone();
            String cgc = dados.getCGC();
            String contato = dados.getContato();
            
        try {
            switch (op) {
                case 1:
                    if (cgc != null) {
                        preparedStatement = con.prepareStatement("INSERT INTO fornecedores values (default, ?,?,?,?,?)");
                        preparedStatement.setString(1, cgc);
                        preparedStatement.setString(2, nome);
                        preparedStatement.setString(3, endereco);
                        preparedStatement.setString(4, telefone);
                        preparedStatement.setString(5, contato);
                        preparedStatement.executeUpdate();
                    }
                    break;
                case 2:
                        String aux="";
                        preparedStatement = con.prepareStatement("SELECT id , cgc FROM fornecedores WHERE id like ?");
                        preparedStatement.setString(1, id + "%"); 
                        rs = (ResultSet) preparedStatement.executeQuery(); 
                        while(rs.next()){
                            if(rs.getInt("id")==id){
                               aux = rs.getString("cgc"); 
                               break;
                            }
                        }
                        
                        preparedStatement = con.prepareStatement("UPDATE fornecedores SET cgc = ?, nome = ?, endereco = ?, telefone = ?, contato = ?  WHERE id = "+id);
                        preparedStatement.setString(1, cgc);
                        preparedStatement.setString(2, nome);
                        preparedStatement.setString(3, endereco);
                        preparedStatement.setString(4, telefone);
                        preparedStatement.setString(5, contato);
                        preparedStatement.executeUpdate();
                        try{
                            if(cgc.equals("") == false){
                                preparedStatement = con.prepareStatement("SELECT * FROM materiaprima WHERE forn like ?");
                                preparedStatement.setString(1, aux + "%");  
                                rs = (ResultSet) preparedStatement.executeQuery();  
                                while(rs.next()){
                                    if(rs.getString("forn").equalsIgnoreCase(aux)){
                                        int idm = Integer.parseInt(rs.getString("id"));
                                        preparedStatement = con.prepareStatement("UPDATE materiaprima SET forn = ?  WHERE id = "+idm);
                                        preparedStatement.setString(1, cgc);
                                        preparedStatement.executeUpdate();
                                    }   
                                }//end while
                               
                            } 
                        } catch(NumberFormatException | SQLException e){ }
                    break;
                case 3:
                        try{ /* Verifica se já existe um fornecedor pelo cgc ou registro inserido */     
                            boolean existe = false;
                            if(cgc.equals("") == false){
                                preparedStatement = con.prepareStatement("SELECT * FROM fornecedores WHERE cgc like ?");
                                preparedStatement.setString(1, cgc + "%");  
                                rs = (ResultSet) preparedStatement.executeQuery();  
                                while(rs.next()){
                                    if(rs.getString("cgc").equalsIgnoreCase(cgc)){
                                        id = Integer.parseInt(rs.getString("id"));
                                        existe = true;
                                        break;
                                    }   
                                }//end while
                                if(existe){
                                    dados.setIdFornc(id);
                                    dados.setCGC(rs.getString("cgc"));
                                    dados.setNome(rs.getString("nome"));
                                    dados.setEndereco(rs.getString("endereco"));
                                    dados.setTelefone(rs.getString("telefone"));
                                    dados.setContato(rs.getString("contato"));
                                    
                                } else {
                                    dados.setNome("");
                                    dados.setEndereco("");
                                    dados.setTelefone("");
                                    dados.setCGC("");
                                    dados.setContato("");
                                }    
                            } 
                            return dados;
                        } catch(NumberFormatException | SQLException e){ }
                    break;    
                case 4:
                        preparedStatement = con.prepareStatement("DELETE FROM fornecedores WHERE id = "+id);
                        preparedStatement.executeUpdate();
                    break; 
            }


        } catch(SQLException e ) {
            System.out.println(e);
            
        }finally{
            con.close();
            stmt.close();
            
        }
        return dados;
        
    }
    
       public  synchronized static MateriaPrima atualizaMysqlMateriaPrima(MateriaPrima dados, int op) throws ClassNotFoundException, SQLException{
            
         System.out.println("Tentando conectar ao MySQL via Atualiza MYSQL...");
            
           Class.forName("com.mysql.jdbc.Driver");
            String urlMysql = "jdbc:mysql://localhost:3306/bancodedados1";
            String usuarioMysql = "root";
            String senhaMysql = "admin12345"; // SNHA DO MYSQL
            Connection con = DriverManager.getConnection(urlMysql, usuarioMysql, senhaMysql);
            Statement stmt = con.createStatement(); //objeto Statement
            ResultSet rs; //objeto ResultSet
            PreparedStatement preparedStatement;
            
            
            int id = dados.getIdMT();
            String nome = dados.getNome();
            String codigo = dados.getCodigo();
            String medida = dados.getMedida();
            String valor = dados.getValor();
            String forn = dados.getFornecedor();
            
        try {
            switch (op) {
                case 1:
                    if (codigo != null) {
                        preparedStatement = con.prepareStatement("INSERT INTO materiaprima values (default, ?,?,?,?,?)");
                        preparedStatement.setString(1, codigo);
                        preparedStatement.setString(2, nome);
                        preparedStatement.setString(3, medida);
                        preparedStatement.setString(4, valor);
                        preparedStatement.setString(5, forn);
                        preparedStatement.executeUpdate();
                    }
                    break;
                case 2:
                        String aux="";
                        preparedStatement = con.prepareStatement("SELECT id , codigo FROM materiaprima WHERE id like ?");
                        preparedStatement.setString(1, id + "%"); 
                        rs = (ResultSet) preparedStatement.executeQuery(); 
                        while(rs.next()){
                            if(rs.getInt("id")==id){
                               aux = rs.getString("codigo"); 
                               break;
                            }
                        }
                        preparedStatement = con.prepareStatement("UPDATE materiaprima SET codigo = ?, nome = ?, medida = ?, valor = ?, forn = ?  WHERE id = "+id);
                        preparedStatement.setString(1, codigo);
                        preparedStatement.setString(2, nome);
                        preparedStatement.setString(3, medida);
                        preparedStatement.setString(4, valor);
                        preparedStatement.setString(5, forn);
                        preparedStatement.executeUpdate();
                        try{
                            if(aux.equals("") == false){
                                        preparedStatement = con.prepareStatement("UPDATE produto_feito_com SET idmprima = ? WHERE idmprima = ?");
                                        preparedStatement.setString(1, codigo);
                                        preparedStatement.setString(2, aux);
                                        preparedStatement.executeUpdate();  
                                      
                            }                            
                        } catch(NumberFormatException | SQLException e){ }
                    break;
                case 3:
                        try{ /* Verifica se já existe um materiaprimaregistro inserido */     
                            boolean existe = false;
                            
                            if(codigo.equals("") == false){
                                preparedStatement = con.prepareStatement("SELECT * FROM materiaprima WHERE codigo like ?");
                                preparedStatement.setString(1, codigo + "%");  
                                rs = (ResultSet) preparedStatement.executeQuery();  
                                while(rs.next()){
                                    if(rs.getString("codigo").equalsIgnoreCase(codigo)){
                                        id = Integer.parseInt(rs.getString("id"));
                                        existe = true;
                                        break;
                                    }   
                                }//end while
                                if(existe){
                                    dados.setIdMT(id);
                                    dados.setNome(rs.getString("nome"));
                                    dados.setMedida(rs.getString("medida"));
                                    dados.setValor(rs.getString("valor"));
                                    dados.setFornecedor(rs.getString("forn"));
                                } else {
                                    dados.setNome("");
                                    dados.setMedida("");
                                    dados.setValor("");
                                    dados.setFornecedor("");
                                    dados.setCodigo("");
                                }    
                            } 
                            return dados;
                        } catch(NumberFormatException | SQLException e){ }
                    break;    
                case 4:
                        preparedStatement = con.prepareStatement("DELETE FROM materiaprima WHERE id = "+id);
                        preparedStatement.executeUpdate();
                    break; 
            }


        } catch(SQLException e ) {
            System.out.println(e);
            
        }finally{
            con.close();
            stmt.close();
            
        }
        return dados;
        
    } 
    
    public  synchronized static Pao atualizaMysqlProduto(Pao dados, int op) throws ClassNotFoundException, SQLException{
            
         System.out.println("Tentando conectar ao MySQL via Atualiza MYSQL...");
            
           Class.forName("com.mysql.jdbc.Driver");
            String urlMysql = "jdbc:mysql://localhost:3306/bancodedados1";
            String usuarioMysql = "root";
            String senhaMysql = "admin12345"; // SNHA DO MYSQL
            Connection con = DriverManager.getConnection(urlMysql, usuarioMysql, senhaMysql);
            Statement stmt = con.createStatement(); //objeto Statement
            ResultSet rs; //objeto ResultSet
            PreparedStatement preparedStatement;
            
            
            int id = dados.getIdProduto();
            String tipo = dados.getTipo_pao();
            String codigo = dados.getCodigo();
            String peso = dados.getPeso();
            String validade = dados.getValidade();
            String valor = dados.getValor();
            
        try {
            switch (op) {
                case 1:
                    if (codigo != null) {
                        preparedStatement = con.prepareStatement("INSERT INTO produtos values (default, ?,?,?,?,?)");
                        preparedStatement.setString(1, codigo);
                        preparedStatement.setString(2, tipo);
                        preparedStatement.setString(3, valor);
                        preparedStatement.setString(4, validade);
                        preparedStatement.setString(5, peso);
                        preparedStatement.executeUpdate();
                    }
                    break;
                case 2:
                        preparedStatement = con.prepareStatement("UPDATE produtos SET codigo = ?, tipo = ?, valor = ?, validade = ?, peso = ? WHERE id = "+id);
                        preparedStatement.setString(1, codigo);
                        preparedStatement.setString(2, tipo);
                        preparedStatement.setString(3, valor);
                        preparedStatement.setString(4, validade);
                        preparedStatement.setString(5, peso);
                        preparedStatement.executeUpdate();
                    break;
                case 3:
                        try{ /* Verifica se já existe um produtos registro inserido */     
                            boolean existe = false;
                            
                            if(codigo.equals("") == false){
                                preparedStatement = con.prepareStatement("SELECT * FROM produtos WHERE codigo like ?");
                                preparedStatement.setString(1, codigo + "%");  
                                rs = (ResultSet) preparedStatement.executeQuery();  
                                while(rs.next()){
                                    if(rs.getString("codigo").equalsIgnoreCase(codigo)){
                                        id = Integer.parseInt(rs.getString("id"));
                                        existe = true;
                                        break;
                                    }   
                                }//end while
                                if(existe){
                                    dados.setIdProduto(id);
                                    dados.setCodigo(rs.getString("codigo"));
                                    dados.setTipo_pao(rs.getString("tipo"));
                                    dados.setValor(rs.getString("valor"));
                                    dados.setValidade(rs.getString("validade"));
                                    dados.setPeso(rs.getString("peso"));
                                } else {
                                     dados.setTipo_pao("");
                                    dados.setCodigo("");
                                    dados.setValor("");
                                    dados.setValidade("");
                                    dados.setPeso("");
                                }    
                            } 
                            return dados;
                        } catch(NumberFormatException | SQLException e){ }
                    break;    
                case 4:
                        preparedStatement = con.prepareStatement("DELETE FROM produtos WHERE id = "+id);
                        preparedStatement.executeUpdate();
                    break; 
            }


        } catch(SQLException e ) {
            System.out.println(e);
            
        }finally{
            con.close();
            stmt.close();
            
        }
        return dados;
        
    }
        public  synchronized static Feito_Com atualizaMysqlProdutoDetalhe(Feito_Com dados, int op) throws ClassNotFoundException, SQLException{
            
         System.out.println("Tentando conectar ao MySQL via Atualiza MYSQL...");
            
           Class.forName("com.mysql.jdbc.Driver");
            String urlMysql = "jdbc:mysql://localhost:3306/bancodedados1";
            String usuarioMysql = "root";
            String senhaMysql = "admin12345"; // SNHA DO MYSQL
            Connection con = DriverManager.getConnection(urlMysql, usuarioMysql, senhaMysql);
            Statement stmt = con.createStatement(); //objeto Statement
            ResultSet rs; //objeto ResultSet
            PreparedStatement preparedStatement;
            
            
            int id = dados.getId();
            String idProduto = dados.getIdProduto();
            String idMateria = dados.getIdMateria();
            String quantidade = dados.getQuantidade();
            String nome = dados.getNome();
            
        try {
            switch (op) {
                case 1:
                    if (idProduto != null) {
                        preparedStatement = con.prepareStatement("INSERT INTO produto_feito_com values (default, ?,?,?,?)");
                        preparedStatement.setString(1, idProduto);
                        preparedStatement.setString(2, idMateria);
                        preparedStatement.setString(3, quantidade);
                        preparedStatement.setString(4, nome);
                        preparedStatement.executeUpdate();
                    }
                    break;
                case 2:
                        String aux="";
                        preparedStatement = con.prepareStatement("SELECT id , idproduto FROM produto_feito_com WHERE id like ?");
                        preparedStatement.setString(1, id + "%"); 
                        rs = (ResultSet) preparedStatement.executeQuery(); 
                        while(rs.next()){
                            if(rs.getInt("id")==id){
                               aux = rs.getString("idproduto"); 
                               break;
                            }
                        }
                        preparedStatement = con.prepareStatement("UPDATE produto_feito_com SET idproduto = ?, idmprima = ?, quantidade = ?, nome = ?  WHERE id = "+id);
                        preparedStatement.setString(1, idProduto);
                        preparedStatement.setString(2, idMateria);
                        preparedStatement.setString(3, quantidade);
                        preparedStatement.setString(4, nome);
                        preparedStatement.executeUpdate();
                        try{
                        if(aux.equals("") == false){
                                        preparedStatement = con.prepareStatement("UPDATE pedido_detalhe SET idproduto = ? WHERE idproduto = ?");
                                        preparedStatement.setString(1, idProduto);
                                        preparedStatement.setString(2, aux);
                                        preparedStatement.executeUpdate();  
                                      
                            }                            
                        } catch(NumberFormatException | SQLException e){ }
                    break;
                case 3:
                        try{ /* Verifica se já existe um produtos registro inserido */     
                            boolean existe = false;
                            
                            if(idProduto.equals("") == false){
                                preparedStatement = con.prepareStatement("SELECT * FROM produto_feito_com WHERE idproduto like ?");
                                preparedStatement.setString(1, idProduto + "%");  
                                rs = (ResultSet) preparedStatement.executeQuery();  
                                while(rs.next()){
                                    if(rs.getString("idProduto").equalsIgnoreCase(idProduto)){
                                        id = Integer.parseInt(rs.getString("id"));
                                        existe = true;
                                        break;
                                    }   
                                }//end while
                                if(existe){
                                    dados.setId(id);
                                    dados.setIdProduto(rs.getString("idproduto"));
                                    dados.setIdMateria(rs.getString("idmprima"));
                                    dados.setQuantidade(rs.getString("quantidade"));
                                    dados.setNome(rs.getString("nome"));
                                } else {
                                    dados.setIdProduto("");
                                    dados.setQuantidade("");
                                    dados.setIdMateria("");
                                    dados.setNome("");
                                }    
                            } 
                            return dados;
                        } catch(NumberFormatException | SQLException e){ }
                    break;    
                case 4:
                                preparedStatement = con.prepareStatement("SELECT * FROM produto_feito_com WHERE idproduto like ?");
                                preparedStatement.setString(1, idProduto + "%");  
                                rs = (ResultSet) preparedStatement.executeQuery();  
                                while(rs.next()){
                                    if(rs.getString("idproduto").equalsIgnoreCase(idProduto)){
                                        id = Integer.parseInt(rs.getString("id"));
                                        preparedStatement = con.prepareStatement("DELETE FROM produto_feito_com WHERE id = "+id);
                                        preparedStatement.executeUpdate();
                                    }   
                                }//end while
                    break; 
            }


        } catch(SQLException e ) {
            System.out.println(e);
            
        }finally{
            con.close();
            stmt.close();
            
        }
        return dados;
        
    }
    public  synchronized static Pedido atualizaMysqlPedido(Pedido dados, int op) throws ClassNotFoundException, SQLException{
            
         //System.out.println("Tentando conectar ao MySQL via Atualiza MYSQL...");
            
           Class.forName("com.mysql.jdbc.Driver");
            String urlMysql = "jdbc:mysql://localhost:3306/bancodedados1";
            String usuarioMysql = "root";
            String senhaMysql = "admin12345"; // SNHA DO MYSQL
            Connection con = DriverManager.getConnection(urlMysql, usuarioMysql, senhaMysql);
            Statement stmt = con.createStatement(); //objeto Statement
            ResultSet rs; //objeto ResultSet
            PreparedStatement preparedStatement;
            
            
            int id = dados.getIdPedido();
            String codigo = dados.getCodigo();
            String data = dados.getData();
            String valor = dados.getValor();
            String cpfC = dados.getCpfCliente();
            String idFun = dados.getIdFuncionario();
            String enDB = dados.getEndereco_busca();
            String enDE = dados.getEndereco_entrega();
            
        try {
            switch (op) {
                case 1:
                    if (codigo != null) {
                        preparedStatement = con.prepareStatement("INSERT INTO pedidos values (default, ?,?,?,?,?,?,?)");
                        preparedStatement.setString(1, codigo);
                        preparedStatement.setString(2, data);
                        preparedStatement.setString(3, valor);
                        preparedStatement.setString(4, cpfC);
                        preparedStatement.setString(5, idFun);
                        preparedStatement.setString(6, enDB);
                        preparedStatement.setString(7, enDE);
                        preparedStatement.executeUpdate();
                    }
                    break;
                case 2:
                        preparedStatement = con.prepareStatement("UPDATE pedidos SET codigo = ?, data = ?, valor = ?, cpfC = ?, idFun = ?, enDB =?, enDE = ? WHERE id = "+id);
                        preparedStatement.setString(1, codigo);
                        preparedStatement.setString(2, data);
                        preparedStatement.setString(3, valor);
                        preparedStatement.setString(4, cpfC);
                        preparedStatement.setString(5, idFun);
                        preparedStatement.setString(6, enDB);
                        preparedStatement.setString(7, enDE);
                        preparedStatement.executeUpdate();
                    break;
                case 3:
                        try{ /* Verifica se já existe um produtos registro inserido */     
                            boolean existe = false;
                            if(codigo.equals("") == false){
                                preparedStatement = con.prepareStatement("SELECT * FROM pedidos WHERE codigo like ?");
                                preparedStatement.setString(1, codigo + "%");  
                                rs = (ResultSet) preparedStatement.executeQuery();  
                                while(rs.next()){
                                    if(rs.getString("codigo").equalsIgnoreCase(codigo)){
                                        id = Integer.parseInt(rs.getString("id"));
                                        existe = true;
                                        break;
                                        
                                    }  
                                }//end while
                                if(existe){
                                    dados.setIdPedido(id);
                                    dados.setCodigo(rs.getString("codigo"));
                                    dados.setData(rs.getString("data"));
                                    dados.setValor(rs.getString("valor"));
                                    dados.setCpfCliente(rs.getString("cpfC"));
                                    dados.setIdFuncionario(rs.getString("idFun"));
                                    dados.setEndereco_busca(rs.getString("enDB"));
                                    dados.setEndereco_entrega(rs.getString("enDE"));
                                } else {
                                    dados.setCodigo("");
                                    dados.setData("");
                                    dados.setValor("");
                                    dados.setCpfCliente("");
                                    dados.setIdFuncionario("");
                                    dados.setEndereco_busca("");
                                    dados.setEndereco_entrega("");
                                }    
                            } 
                            return dados;
                        } catch(NumberFormatException | SQLException e){ }
                    break;    
                case 4:
                        preparedStatement = con.prepareStatement("DELETE FROM pedidos WHERE id = "+id);
                        preparedStatement.executeUpdate();
                    break; 
            }


        } catch(SQLException e ) {
            System.out.println(e);
            
        }finally{
            con.close();
            stmt.close();
            
        }
        return dados;
        
    }
    public  synchronized static Produto_Detalhe atualizaMysqlPedidoDetalhe(Produto_Detalhe dados, int op) throws ClassNotFoundException, SQLException{
            
         System.out.println("Tentando conectar ao MySQL via Atualiza MYSQL...");
            
           Class.forName("com.mysql.jdbc.Driver");
            String urlMysql = "jdbc:mysql://localhost:3306/bancodedados1";
            String usuarioMysql = "root";
            String senhaMysql = "admin12345"; // SNHA DO MYSQL
            Connection con = DriverManager.getConnection(urlMysql, usuarioMysql, senhaMysql);
            Statement stmt = con.createStatement(); //objeto Statement
            ResultSet rs; //objeto ResultSet
            PreparedStatement preparedStatement;
            
            
            int id = dados.getId();
            String idPedido = dados.getIdPedido();
            String idProduto = dados.getIdProduto();
            String quantidade = dados.getQuantidade();
            String preco = dados.getPreco();
            String nome = dados.getNome();
            
        try {
            switch (op) {
                case 1:
                    if (idPedido != null) {
                        preparedStatement = con.prepareStatement("INSERT INTO pedido_detalhe values (default, ?,?,?,?,?)");
                        preparedStatement.setString(1, idPedido);
                        preparedStatement.setString(2, idProduto);
                        preparedStatement.setString(3, quantidade);
                        preparedStatement.setString(4, preco);
                        preparedStatement.setString(5, nome);
                        preparedStatement.executeUpdate();
                    }
                    break;
                case 2:
                        preparedStatement = con.prepareStatement("UPDATE pedido_detalhe SET idPedido = ?, idProduto = ?, quantidade = ?, preco = ?, nome = ?  WHERE id = "+id);
                        preparedStatement.setString(1, idPedido);
                        preparedStatement.setString(2, idProduto);
                        preparedStatement.setString(3, quantidade);
                        preparedStatement.setString(4, preco);
                        preparedStatement.setString(5, nome);
                        preparedStatement.executeUpdate();
                    break;
                case 3:
                        try{ /* Verifica se já existe um produtos registro inserido */     
                            boolean existe = false;
                            
                            if(idPedido.equals("") == false){
                                preparedStatement = con.prepareStatement("SELECT * FROM pedido_detalhe WHERE idPedido like ?");
                                preparedStatement.setString(1, idPedido + "%");  
                                rs = (ResultSet) preparedStatement.executeQuery();  
                                while(rs.next()){
                                    if(rs.getString("idPedido").equalsIgnoreCase(idPedido)){
                                        id = Integer.parseInt(rs.getString("id"));
                                        existe = true;
                                        break;
                                    }   
                                }//end while
                                if(existe){
                                    dados.setId(id);
                                    dados.setIdPedido(rs.getString("idPedido"));
                                    dados.setIdProduto(rs.getString("idProduto"));
                                    dados.setQuantidade(rs.getString("quantidade"));
                                    dados.setPreco(rs.getString("preco"));
                                    dados.setNome(rs.getString("nome"));
                                } else {
                                    dados.setIdPedido("");
                                    dados.setIdProduto("");
                                    dados.setQuantidade("");
                                    dados.setPreco("");
                                    dados.setNome("");
                                }    
                            } 
                            return dados;
                        } catch(NumberFormatException | SQLException e){ }
                    break;    
                case 4:

                                preparedStatement = con.prepareStatement("SELECT * FROM pedido_detalhe WHERE idpedido like ?");
                                preparedStatement.setString(1, idPedido + "%");  
                                rs = (ResultSet) preparedStatement.executeQuery();  
                                while(rs.next()){
                                    if(rs.getString("idpedido").equalsIgnoreCase(idPedido)){
                                        id = Integer.parseInt(rs.getString("id"));
                                        preparedStatement = con.prepareStatement("DELETE FROM pedido_detalhe WHERE id = "+id);
                                        preparedStatement.executeUpdate();
                                    }   
                                }//end while

                    break; 
            }


        } catch(SQLException e ) {
            System.out.println(e);
            
        }finally{
            con.close();
            stmt.close();
            
        }
        return dados;
        
    }
        
    public void Login(){
        if(jFormattedTextFieldIdentificador.getText().equalsIgnoreCase("      ")){
            jLabelLogin.setText("Digite seu Login");
        }if(jFormattedTextFieldIdentificador.getText().equalsIgnoreCase("000000")){
                    this.screen1 = new TelaPrincipal(jFormattedTextFieldIdentificador.getText(), true);
                jPanel2.add(screen1);
                jPanelLogin.setVisible(false);
                screen1.setVisible(true);
        }
        else {
                                this.screen1 = new TelaPrincipal(jFormattedTextFieldIdentificador.getText(), false);
                jPanel2.add(screen1);
                jPanelLogin.setVisible(false);
                screen1.setVisible(true);
 
        }

    } 

   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel HOME;
    private javax.swing.JButton jButtonLogin;
    private javax.swing.JFormattedTextField jFormattedTextFieldIdentificador;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabelFechar;
    private javax.swing.JLabel jLabelLogin;
    private javax.swing.JLabel jLabelMaxMin;
    private javax.swing.JLabel jLabelMin;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanelLogin;
    // End of variables declaration//GEN-END:variables
}
